name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  backend:
    name: Build & Test (Backend)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - name: Setup Temurin JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven
      - name: Maven Build & Test
        run: mvn -B -DskipTests=false clean verify
      - name: Upload backend jar
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/target/*.jar

  frontend:
    name: Build (Frontend)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install deps
        run: npm ci
      - name: Lint
        run: npm run lint --if-present
      - name: Build
        run: npm run build
      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

  deploy-staging:
    name: Deploy (Ephemeral Runner)
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    env:
      BACKEND_PORT: 8081
      FRONTEND_PORT: 8080
    steps:
      - name: Download backend jar
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: app
      - name: Start backend
        run: |
          JAR=$(ls app/*.jar | head -n 1)
          nohup java -jar "$JAR" --server.port=${BACKEND_PORT} > app.log 2>&1 &
          echo $! > app.pid
          sleep 15
      - name: Health check backend via /auth/test
        run: |
          for i in {1..10}; do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:${BACKEND_PORT}/auth/test")
            echo "HTTP $CODE"
            if [ "$CODE" -ge 200 ] && [ "$CODE" -lt 300 ]; then
              echo "Backend OK - /auth/test succeeded"
              exit 0
            fi
            echo "Waiting for backend..."
            sleep 3
          done
          echo "Backend check failed"
          tail -n 200 app.log || true
          exit 1
      - name: Cleanup backend
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
          fi
